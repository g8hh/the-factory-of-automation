const UPGS = {
	rows: 9,
	cols: 6,
	11: {
		unlocked(m=tmp.mti) { return player.materials[m].autosUnl.gte(3) },
		desc: "5x A1 speed",
		cost: new Decimal(100),
	},
	12: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(11) },
		desc() { return "4x "+tmp.mta+" gain" },
		cost: new Decimal(500),
	},
	21: {
		unlocked(m=tmp.mti) { return player.materials[m].autosUnl.gte(4) || Decimal.gte(player.materials[m].autoData[1]||0, 2) },
		desc: "No more spending",
		cost: new Decimal(2500),
	},
	22: {
		unlocked(m=tmp.mti) { return player.materials[m].autosUnl.gte(4) },
		desc() { return "3x "+tmp.mta+" gain" },
		cost: new Decimal(200e3),
		type: "smalltxt",
	},
	31: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(22) },
		desc: "Post-100 scale 50 later",
		cost: new Decimal(1e6),
	},
	32: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(31) },
		desc: "log2(A2)x A1 speed",
		tooltip() { return "Currently: "+format(getAutoAmt(new Decimal(2), tmp.mti).max(1).log2().max(1))+"x" },
		cost: new Decimal(2.5e6),
	},
	41: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(32) },
		desc: "Post-100 scale 25% weaker",
		cost: new Decimal(1e7),
	},
	42: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(41) },
		desc: "log2(A1)x Steel gain",
		desc() { return "log2(A1)x "+tmp.mta+" gain" },
		tooltip() { return "Currently: "+format(getAutoAmt(new Decimal(1), tmp.mti).max(1).log2().max(1))+"x" },
		cost: new Decimal(1.5e7),
	},
	51: {
		unlocked(m=tmp.mti) { return player.materials[m].autosUnl.gte(5) || Decimal.gte(player.materials[m].autoData[2]||0, 2) },
		desc() { return "10x "+tmp.mta+" gain" },
		cost: new Decimal(1.2e9),
	},
	52: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(51) },
		desc: "10x A1 speed",
		cost: new Decimal(2.5e10),
	},
	61: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(52) },
		desc() { return "log2(log2("+tmp.mta+"))x "+tmp.mta+" gain, and A1 & A2 speed" },
		tooltip() { return "Currently: "+format(player.materials[tmp.mti]?player.materials[tmp.mti].amt.max(1).log2().max(1).log2().max(1):new Decimal(1))+"x" },
		cost: new Decimal(4e11),
		type: "wide",
	},
	71: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(61) },
		desc() { return "Post-100 scale log1.25("+tmp.mta+") later" },
		tooltip() { return "Currently: "+format(player.materials[tmp.mti]?player.materials[tmp.mti].amt.max(1).log(1.5).max(1):new Decimal(1))+" later" },
		cost: new Decimal(1.5e14),
		type: "wide",
	},
	81: {
		unlocked(m=tmp.mti) { return player.materialsUnl.gt(tmp.mtd[m].plus(1)) },
		desc: "Each Automator gets a multiplier equal to its amount",
		cost: new Decimal(1e69),
		type: "wide",
	},
	91: {
		unlocked(m=tmp.mti) { return player.materialsUnl.gt(tmp.mtd[m].plus(2)) },
		desc: "10,000x A2 speed",
		cost: new Decimal(1e289),
	},
	92: {
		unlocked(m=tmp.mti) { return player.materialsUnl.gt(tmp.mtd[m].plus(2)) },
		desc: "1e9x A1 speed",
		cost: Decimal.pow(10, Math.PI*100),
	},
	
	13: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(14) },
		desc: "15x A1 speed",
		cost: new Decimal(1e16),
		right: true,
	},
	14: {
		unlocked(m=tmp.mti) { return player.materials[m].autosUnl.gte(5) },
		desc() { return "(2^A)x "+tmp.mta+" gain" },
		tooltip() { return "A = number of unique autobuyers unlocked \n \n Currently: "+formatWhole(Decimal.pow(2, player.materials[tmp.mti]?player.materials[tmp.mti].autosUnl.sub(1):0))+"x" },
		cost: new Decimal(2.5e14),
		right: true,
	},
	23: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(13) },
		desc: "3x A2 speed",
		cost: new Decimal(1e18),
		right: true,
	},
	24: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(13)||player.materials[m].upgs.includes(25) },
		desc: "Reduce auto costs",
		tooltip() { return "Start cost: "+formatWhole(Decimal.add(5, tmp.mti))+" → "+formatWhole(Decimal.add((tmp.mti==0)?4:3, tmp.mti)) },
		cost() { return new Decimal(tmp.mti>=2?1e13:1e18) },
		right: true,
		layered: true,
	},
	33: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(23)||player.materials[m].upgs.includes(24) },
		desc() { return "(1.3^U)x "+tmp.mta+" gain" },
		tooltip() { return "U = number of normal upgrades bought \n \n Currently: "+format(Decimal.pow(1.3, player.materials[tmp.mti]?player.materials[tmp.mti].upgs.length:0))+"x" },
		cost: new Decimal(1.5e18),
		right: true,
		type: "wide",
	},
	43: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(24) && player.materials[m].upgs.includes(33) },
		desc: "Reduce auto costs",
		tooltip() { return "Start cost: 4 → 3" },
		cost: new Decimal(2.5e20),
		right: true,
	},
	44: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(23) && player.materials[m].upgs.includes(33) },
		desc: "4x A2 speed",
		cost: new Decimal(2.5e20),
		right: true,
	},
	53: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(43)||player.materials[m].upgs.includes(44) },
		desc: "Anything that speeds up A2 also speeds up A1",
		cost: new Decimal(1.75e21),
		right: true,
		type: "wide",
	},
	63: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(53) },
		desc: "Post-100 scale 50 later",
		cost() { return new Decimal(player.materials[tmp.mti]?(player.materials[tmp.mti].upgs.includes(64)?1.5e23:1e23):1.5e23) },
		right: true,
	},
	64: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(53) },
		desc: "Post-100 scale log2(A1)*1.9 later",
		tooltip() { return "Currently: "+format(getAutoAmt(new Decimal(1), tmp.mti).max(1).log2().times(1.9))+" later" },
		cost() { return new Decimal(player.materials[tmp.mti]?(player.materials[tmp.mti].upgs.includes(63)?1.5e23:1e23):1.5e23) },
		right: true,
		type: "smalltxt",
	},
	73: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(63) && player.materials[m].upgs.includes(64) },
		desc() { return "log1.25(log1.25(A1))x "+tmp.mta+" gain, and A1 & A2 speed" },
		tooltip() { return "Currently: "+format(player.materials[tmp.mti]?player.materials[tmp.mti].amt.max(1).log(1.25).max(1).log(1.25).max(1):new Decimal(1))+"x" },
		cost: new Decimal(3e23),
		right: true,
		type: "wide",
	},
	83: {
		unlocked(m=tmp.mti) { return player.materialsUnl.gt(tmp.mtd[m].plus(1)) && ((m!=tmp.mti)||tmp.mtni) },
		desc() { return "(log2("+tmp.mta+")^4)x "+getMaterialName(tmp.mti, 1)+" gain, and reduce "+getMaterialName(tmp.mti, 1)+"'s auto costs & "+getMaterialName(tmp.mti, 1)+"'s A1 & A2 are 25x faster" },
		tooltip() { return "Currently: "+format(player.materials[tmp.mtni].amt.max(1).log2().max(1).pow(4))+"x \n \n Auto Costs: "+formatWhole(Decimal.add(3, tmp.mtni))+" → "+formatWhole(Decimal.add(2, tmp.mtni)) },
		cost: new Decimal(1e100),
		right: true,
		layered: true,
		type: "wide",
		smalltxt: true,
	},
	93: {
		unlocked(m=tmp.mti) { return player.materialsUnl.gt(tmp.mtd[m].plus(2)) && ((m!=tmp.mti)||tmp.mtn2i) },
		desc() { return "(log2("+tmp.mta+"))x "+getMaterialName(tmp.mti, 2)+" gain & its A2 speed" },
		tooltip() { return "Currently: "+format(player.materials[tmp.mtni].amt.max(1).log2().max(1))+"x" },
		cost: new Decimal('1e325'),
		right: true,
		layered: true,
		type: "wide",
	},
	
	15: {
		unlocked(m=tmp.mti) { return true },
		desc() { return "log10("+getMaterialName(tmp.mtpi)+")x "+tmp.mta+" gain" },
		tooltip() { return "Currently: "+format(player.materials[tmp.mtpi].amt.max(1).log10().max(1))+"x" },
		cost: new Decimal(1e6),
		layered: true,
		type: "smalltxt",
	},
	16: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(15) },
		desc() { return "Tetrate the "+tmp.mta+" effect by "+format(tmp.tet[tmp.mti]) },
		cost() { return new Decimal(tmp.mti>=2?5e10:5e15) },
		layered: true,
		type: "smalltxt",
	},
	25: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(16) },
		desc() { return "log5("+getMaterialName(tmp.mtpi)+")x A1 speed" },
		tooltip() { return "Currently: "+format(player.materials[tmp.mtpi].amt.max(1).log(5).max(1))+"x" },
		cost() { return new Decimal(tmp.mti>=2?1e11:4e16) },
		layered: true,
		type: "smalltxt",
	},
	35: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(24)&&player.materials[m].upgs.includes(25) },
		desc: "Each Automator gets a multiplier based on its amount (log10(x)+1)",
		cost() { return new Decimal(tmp.mti>=2?3e17:1e19) },
		layered: true,
		type: "wide",
	},
	45: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(35) },
		desc() { return ((tmp.mta=="Gold")?"The above upgrade also applies to Steel, and a":"A")+"nything that speeds up A2 also speeds up A1" },
		cost() { return new Decimal(tmp.mti>=2?(tmp.mti>=3?1e19:5e19):1.5e20) },
		layered: true,
		type: "wide",
		smalltxt: true,
	},
	55: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(45) },
		desc() { return "Mult to "+tmp.mta+" gain also multiplies "+getMaterialName(tmp.mtpi)+" gain" },
		cost() { return new Decimal(tmp.mti>=2?5e20:2.5e21) },
		layered: true,
		type: "smalltxt",
	},
	56: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(45) },
		desc() { return tmp.mti<2?("Reduce "+getMaterialName(tmp.mtpi)+"'s auto costs"):"100x A1 speed" },
		tooltip() { return tmp.mti<2?("Start cost: "+((tmp.mtpi==0)?"3":formatWhole(Decimal.add(3, tmp.mtd[tmp.mtpi])))+" → "+((tmp.mtpi==0)?"2":formatWhole(Decimal.add(2, tmp.mtd[tmp.mtpi])))):false },
		cost() { return new Decimal(tmp.mti>=2?5e20:2.5e21) },
		layered: true,
	},
	65: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(55)&&player.materials[m].upgs.includes(56) },
		desc() { return "sqrt(log2("+tmp.mta+" effect)*50)x "+tmp.mta+" gain" },
		tooltip() { return "Currently: "+format(player.materials[tmp.mti]?player.materials[tmp.mti].amt.max(1).log2().times(50).max(1).sqrt():new Decimal(1))+"x" },
		cost: new Decimal(1.25e22),
		layered: true,
		type: "wide",
	},
	75: {
		unlocked(m=tmp.mti) { return player.materials[m].upgs.includes(65) },
		desc() { return "The "+tmp.mta+" effect's tetration exponent is increased by 0.03 for every autobuyer unlocked (caps at +0.3)" },
		tooltip() { return "Currently: +"+format(player.materials[tmp.mti]?(player.materials[tmp.mti].autosUnl.sub(1).max(0).times(.03).min(.3)):0) },
		cost: new Decimal(1e24),
		layered: true,
		type: "wide",
		smalltxt: true,
	},
}

function hasUpg(n, l) { return player.materials[l].upgs.includes(n) }

function buyUpg(n, l) {
	if (player.materials[l].upgs.includes(n)) return false;
	if (player.materials[l].amt.lt(checkFunc(UPGS[n].cost))) return false;
	player.materials[l].amt = player.materials[l].amt.sub(checkFunc(UPGS[n].cost));
	player.materials[l].upgs.push(n);
	return true;
}